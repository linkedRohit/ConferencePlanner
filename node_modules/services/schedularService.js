var schedularService = {};
var app_config = require('../../config');
let sumInStack = null;
let indexInStack = null;

var scheduleManager = function(fileContent) {
    return extractDataAndValidate(fileContent, scheduleSessions);
};

var extractDataAndValidate = function(fileContent, callback) {
    var sessionsArr = fileContent.toString().split(/\r?\n/);
    var eachSessionArr = Array();
    var counter = 0;
    if(sessionsArr.length == 0) {
	eachSessionArr['status'] = false;
        eachSessionArr['msg'] = "Empty file, no talk list found in the file.";
    }

    for (var session in sessionsArr) {
	var splittedSession = sessionsArr[session].split(" ");
	eachSessionArr[counter] = new Array();
        eachSessionArr[counter]['id'] = counter;
	if(sessionsArr[session] && splittedSession.length > 1)
            eachSessionArr[counter]['description'] = sessionsArr[session];
	else {
	    if(session != sessionsArr.length -1) {
	        eachSessionArr['status'] = false; 
	        eachSessionArr['msg'] = "Unable to read valid description of the talk for record : " + sessionsArr[session];
	        break;
	    }
	}
        var time = splittedSession[splittedSession.length - 1];
 	var timeVal = time.replace("min","").trim();
	if(time && timeVal != 0 && (timeVal <= 240 || time == "lightning")) {
	    eachSessionArr[counter]['time'] = (time == "lightning") ? app_config.lightningTime : time.replace("min","").trim();
	} else {
	    if(session != sessionsArr.length -1) {
	        eachSessionArr['status'] = false; 
                eachSessionArr['msg'] = "Invalid time duration for the talk : " + eachSessionArr[counter]['description'];
                break;
	    }
	}
	counter++;
    }
    return callback(eachSessionArr);
};

var scheduleSessions = function(data, callback) {
    if(data['status'] == false) {
	return data;
    }
    var originalData = Array();
    originalData = data.slice();
    //We will get the Conference timings from config file for more generic approach
    var morningSession = (app_config.endTime - app_config.startTime) * 60; //minutes
    var eveningSession = (app_config.dayEndTime - app_config.dayStartTime) * 60; //minutes
    var num_of_days = app_config.num_tracks;
    var sets = Array();
    var count = 0;
    var track = Array();
    var morningIndex = Array();
    var eveningIndex = Array();
    do {
	sumInStack = Array(); indexInStack = Array();
        var morning = findSumSubsets(data,morningSession);
        while(!(morning[0] && morning[1])) {}
	track[count] = Array();
	track[count]['morningSets'] = morning[0].slice(0,1)[0];
	var indexesToRemove = morning[1].slice(0,1)[0];
	morningIndex.push(indexesToRemove);
	for(index in indexesToRemove) {
	    for(node in data) {
		if(data[node]['id'] == indexesToRemove[index]) {
	            data.splice(node, 1);
	        }
	    }
	}

	sumInStack = Array();
	indexInStack = Array();	
	evening = findSumSubsets(data,eveningSession);
	while(!(evening[0] && evening[1])) {}
	track[count]['eveningSets'] = evening[0].slice(0,1)[0];
	var indexesToRemove = evening[1].slice(0,1)[0];
	eveningIndex.push(indexesToRemove);
        for(index in indexesToRemove) {
            for(node in data) {
                if(data[node]['id'] == indexesToRemove[index]) {
                    data.splice(node, 1);
                }
            }
        }
	count++;
    } while( count < num_of_days);
    return formatOutput(originalData, morningIndex, eveningIndex, num_of_days);
};

var formatOutput = function(talkList, morningTrack, eveningTrack, numDays) {
    var count = 0;
    var response = "";
    while (count < numDays) {
	var dateTime = new Date(2016,12,25, app_config.startTime, 00,00,000);

	response += "Track : " + (count+1) + "\n";
        for(i in morningTrack[count]) {
	    for(talk in talkList) {
		if(talkList[talk]['id'] == morningTrack[count][i]) {
		    response += dateTime.getHours() + ":" + (dateTime.getMinutes() < 10 ? "0" + dateTime.getMinutes() : dateTime.getMinutes() )+ " " + talkList[talk]['description'] + "\n";

		    dateTime.setTime(dateTime.getTime() + talkList[talk]['time']*60*1000);
		}
	    }
	}

	response += "\n";
	response += dateTime.getHours() + ":" + (dateTime.getMinutes() < 10 ? "0" + dateTime.getMinutes() : dateTime.getMinutes()) + " " + "Lunch Time\n\n";

	dateTime.setTime(dateTime.getTime() + 60*60*1000);
	for(i in eveningTrack[count]) {
	    for(talk in talkList) {
                if(talkList[talk]['id'] == eveningTrack[count][i]) {
                    response += dateTime.getHours() + ":" + (dateTime.getMinutes() < 10 ? "0" + dateTime.getMinutes() : dateTime.getMinutes()) + " " + talkList[talk]['description'] + "\n";
		    dateTime.setTime(dateTime.getTime() + talkList[talk]['time']*60*1000);
		}
            }
	}
	response += dateTime.getHours() + ":" + (dateTime.getMinutes() < 10 ? "0" + dateTime.getMinutes() : dateTime.getMinutes()) + " " + "Networking Event";

	response += "\n\n\n\n";
	count++;
    }
    return response;
};

var findSumSubsets = function(sessions, SUM, iStack, tStack) {
    let sum, n, remaining;
    if(typeof tStack == "undefined") tStack = [];
    if(typeof iStack == "undefined") iStack = []; 
    if(tStack.length >0)
        sum = tStack.reduce( (a,b) => parseInt(a)+parseInt(b), 0);
    if(sum > SUM) return null;
    if(sum === SUM) {
	if(!sumInStack) sumInStack = [];
	if(!indexInStack) indexInStack = [];
	sumInStack.push(tStack);
	indexInStack.push(iStack);
    }

    for(let i=0; i<sessions.length; i++) {
	n = sessions[i];
	remaining = sessions.slice(i+1);
	findSumSubsets(remaining, SUM, iStack.concat([n['id']]), tStack.concat([n['time']]));
    }
    return Array(sumInStack, indexInStack);
}

exports.scheduleManager = scheduleManager;
